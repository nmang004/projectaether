# =============================================================================
# Migration-specific Dockerfile for running Alembic migrations
# This is a lightweight container optimized for running database migrations
# =============================================================================

FROM python:3.11-slim

# Install system dependencies required for database connections
RUN apt-get update && apt-get install -y \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Poetry for dependency management
RUN pip install --no-cache-dir poetry

# Configure Poetry for production builds
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Create non-root user for security
RUN groupadd -r migrate && useradd -r -g migrate migrate

WORKDIR /app

# Copy dependency files first for better Docker layer caching
COPY pyproject.toml poetry.lock ./

# Install dependencies including dev dependencies (for alembic)
RUN poetry install --with dev && rm -rf $POETRY_CACHE_DIR

# Copy application code
COPY . .

# Change ownership to migrate user
RUN chown -R migrate:migrate /app

# Switch to non-root user
USER migrate

# Add virtual environment to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Set Python environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Health check for migration readiness
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; sys.exit(0)"

# Default command runs Alembic migrations
CMD ["alembic", "upgrade", "head"]