name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ develop, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  GCP_REGION: us-central1
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    outputs:
      api-image: ${{ steps.build-api.outputs.image }}
      worker-image: ${{ steps.build-worker.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Set environment for image builds
      run: |
        if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "ENV_NAME=staging" >> $GITHUB_ENV
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENV_NAME=production" >> $GITHUB_ENV
        else
          echo "ENV_NAME=dev" >> $GITHUB_ENV
        fi
        echo "ARTIFACT_REGISTRY=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/project-aether-${ENV_NAME}-docker-repo" >> $GITHUB_ENV
    
    - name: Build and push API image
      id: build-api
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ARTIFACT_REGISTRY }}/project-aether-api:latest
          ${{ env.ARTIFACT_REGISTRY }}/project-aether-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push worker image
      id: build-worker
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ARTIFACT_REGISTRY }}/project-aether-worker:latest
          ${{ env.ARTIFACT_REGISTRY }}/project-aether-worker:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.ARTIFACT_REGISTRY }}/project-aether-frontend:latest
          ${{ env.ARTIFACT_REGISTRY }}/project-aether-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Set image outputs
      run: |
        echo "api-image=${{ env.ARTIFACT_REGISTRY }}/project-aether-api:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "worker-image=${{ env.ARTIFACT_REGISTRY }}/project-aether-worker:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "frontend-image=${{ env.ARTIFACT_REGISTRY }}/project-aether-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0
    
    - name: Deploy infrastructure
      working-directory: ./iac/terraform
      run: |
        terraform init
        terraform plan -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="environment=staging"
        terraform apply -auto-approve -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="environment=staging"
    
    - name: Deploy API to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: project-aether-staging-api
        image: ${{ needs.build.outputs.api-image }}
        region: ${{ env.GCP_REGION }}
        env_vars: |
          ENVIRONMENT=staging
          GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          GCP_REGION=${{ env.GCP_REGION }}
        flags: |
          --vpc-connector=project-aether-staging-vpc-connector
          --add-cloudsql-instances=${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:project-aether-staging-postgres
          --service-account=project-aether-staging-api-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          --allow-unauthenticated
    
    - name: Deploy Frontend to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: project-aether-staging-frontend
        image: ${{ needs.build.outputs.frontend-image }}
        region: ${{ env.GCP_REGION }}
        flags: |
          --allow-unauthenticated
          --port=80
    
    - name: Deploy Worker to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: project-aether-staging-worker
        image: ${{ needs.build.outputs.worker-image }}
        region: ${{ env.GCP_REGION }}
        env_vars: |
          ENVIRONMENT=staging
          GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          GCP_REGION=${{ env.GCP_REGION }}
        flags: |
          --vpc-connector=project-aether-staging-vpc-connector
          --add-cloudsql-instances=${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:project-aether-staging-postgres
          --service-account=project-aether-staging-worker-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          --no-traffic
          --min-instances=0
          --max-instances=10
    
    - name: Run database migration
      run: |
        gcloud builds submit --config ./iac/cloudbuild-migrate.yaml --substitutions=_ENVIRONMENT=staging,_IMAGE_TAG=${{ github.sha }},_REGION=${{ env.GCP_REGION }}
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        sleep 30  # Wait for services to be ready
        API_URL=$(gcloud run services describe project-aether-staging-api --region=${{ env.GCP_REGION }} --format="value(status.url)")
        curl -f "$API_URL/health" || exit 1
        echo "✅ Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0
    
    - name: Deploy infrastructure
      working-directory: ./iac/terraform
      run: |
        terraform init
        terraform plan -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="environment=production"
        terraform apply -auto-approve -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="environment=production"
    
    - name: Deploy API to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: project-aether-production-api
        image: ${{ needs.build.outputs.api-image }}
        region: ${{ env.GCP_REGION }}
        env_vars: |
          ENVIRONMENT=production
          GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          GCP_REGION=${{ env.GCP_REGION }}
        flags: |
          --vpc-connector=project-aether-production-vpc-connector
          --add-cloudsql-instances=${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:project-aether-production-postgres
          --service-account=project-aether-production-api-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          --allow-unauthenticated
    
    - name: Deploy Frontend to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: project-aether-production-frontend
        image: ${{ needs.build.outputs.frontend-image }}
        region: ${{ env.GCP_REGION }}
        flags: |
          --allow-unauthenticated
          --port=80
    
    - name: Deploy Worker to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: project-aether-production-worker
        image: ${{ needs.build.outputs.worker-image }}
        region: ${{ env.GCP_REGION }}
        env_vars: |
          ENVIRONMENT=production
          GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          GCP_REGION=${{ env.GCP_REGION }}
        flags: |
          --vpc-connector=project-aether-production-vpc-connector
          --add-cloudsql-instances=${{ env.GCP_PROJECT_ID }}:${{ env.GCP_REGION }}:project-aether-production-postgres
          --service-account=project-aether-production-worker-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          --no-traffic
          --min-instances=0
          --max-instances=20
    
    - name: Run database migration
      run: |
        gcloud builds submit --config ./iac/cloudbuild-migrate.yaml --substitutions=_ENVIRONMENT=production,_IMAGE_TAG=${{ github.sha }},_REGION=${{ env.GCP_REGION }}
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against production environment..."
        sleep 30  # Wait for services to be ready
        API_URL=$(gcloud run services describe project-aether-production-api --region=${{ env.GCP_REGION }} --format="value(status.url)")
        curl -f "$API_URL/health" || exit 1
        echo "✅ Production deployment successful!"
    
    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true
        prerelease: false
