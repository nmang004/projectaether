name: Deploy to AWS

on:
  push:
    branches: [ develop, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    outputs:
      api-image: ${{ steps.build-api.outputs.image }}
      worker-image: ${{ steps.build-worker.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push API image
      id: build-api
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/project-aether-api:latest
          ${{ env.ECR_REGISTRY }}/project-aether-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push worker image
      id: build-worker
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/project-aether-worker:latest
          ${{ env.ECR_REGISTRY }}/project-aether-worker:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/project-aether-frontend:latest
          ${{ env.ECR_REGISTRY }}/project-aether-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Set image outputs
      run: |
        echo "image=${{ env.ECR_REGISTRY }}/project-aether-api:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "image=${{ env.ECR_REGISTRY }}/project-aether-worker:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "image=${{ env.ECR_REGISTRY }}/project-aether-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: iac/package-lock.json
    
    - name: Install CDK dependencies
      working-directory: ./iac
      run: npm ci
    
    - name: Deploy infrastructure
      working-directory: ./iac
      run: |
        npm run build
        npx cdk deploy --require-approval never --context environment=staging
    
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster project-aether-cluster \
          --service project-aether-worker-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster project-aether-cluster \
          --services project-aether-worker-service \
          --region ${{ env.AWS_REGION }}
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        # Add your smoke test commands here
        # curl -f https://staging-api.projectaether.com/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: iac/package-lock.json
    
    - name: Install CDK dependencies
      working-directory: ./iac
      run: npm ci
    
    - name: Deploy infrastructure
      working-directory: ./iac
      run: |
        npm run build
        npx cdk deploy --require-approval never --context environment=production
    
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster project-aether-cluster \
          --service project-aether-worker-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster project-aether-cluster \
          --services project-aether-worker-service \
          --region ${{ env.AWS_REGION }}
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against production environment..."
        # Add your smoke test commands here
        # curl -f https://api.projectaether.com/health
    
    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true
        prerelease: false
